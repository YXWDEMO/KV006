<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Jul 18 14:27:57 2024
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Sleep &rArr; enter_stop &rArr; Get_Usb_Ad &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">ADC_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">ADC_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ADC_COMP_IRQHandler</a> from startup_py32c642xx.o(.text) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[8]">EXTI0_1_IRQHandler</a> from py32c642_it.o(i.EXTI0_1_IRQHandler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[9]">EXTI2_3_IRQHandler</a> from py32c642_it.o(i.EXTI2_3_IRQHandler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[a]">EXTI4_15_IRQHandler</a> from py32c642_it.o(i.EXTI4_15_IRQHandler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[6]">FLASH_IRQHandler</a> from startup_py32c642xx.o(.text) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from py32c642_it.o(i.HardFault_Handler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[e]">LPTIM1_IRQHandler</a> from startup_py32c642xx.o(.text) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from py32c642_it.o(i.NMI_Handler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from py32c642_it.o(i.PendSV_Handler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[7]">RCC_IRQHandler</a> from startup_py32c642xx.o(.text) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_py32c642xx.o(.text) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from py32c642_it.o(i.SVC_Handler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from py32c642_it.o(i.SysTick_Handler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[11]">SystemInit</a> from system_py32c642.o(i.SystemInit) referenced from startup_py32c642xx.o(.text)
 <LI><a href="#[f]">TIM14_IRQHandler</a> from py32c642_it.o(i.TIM14_IRQHandler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[c]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from py32c642_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[d]">TIM1_CC_IRQHandler</a> from startup_py32c642xx.o(.text) referenced from startup_py32c642xx.o(RESET)
 <LI><a href="#[12]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32c642xx.o(.text)
 <LI><a href="#[10]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[12]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[13]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[15]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32c642xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32c642xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32c642xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32c642xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32c642xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32c642xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Stop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[1a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[1c]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[1d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ae]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[25]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[20]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>APP_ErrorHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.APP_ErrorHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_init
</UL>

<P><STRONG><a name="[2d]"></a>APP_SystemClockConfig</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, sys.o(i.APP_SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = APP_SystemClockConfig &rArr; LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>Adc_CalBatRef</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, adc.o(i.Adc_CalBatRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2ToByte
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
</UL>

<P><STRONG><a name="[35]"></a>BatVoltage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, baterry.o(i.BatVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Rest_BatLeve
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_Deal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Ad
</UL>

<P><STRONG><a name="[31]"></a>Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_CalBatRef
</UL>

<P><STRONG><a name="[6e]"></a>ClrShortData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, out.o(i.ClrShortData))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Stop
</UL>

<P><STRONG><a name="[37]"></a>DISP_Deal</STRONG> (Thumb, 1110 bytes, Stack size 8 bytes, disp.o(i.DISP_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DISP_Deal &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Oil_Leve_Map
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve_Map
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, py32c642_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, py32c642_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, py32c642_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, py32c642_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OBProgram
</UL>

<P><STRONG><a name="[36]"></a>GetADCValue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, adc.o(i.GetADCValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetADCValue &rArr; adc_channel_config &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_EOC
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Switch_Ad
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Ad
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Out_Volt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
</UL>

<P><STRONG><a name="[45]"></a>Get_Bat_Leve</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, baterry.o(i.Get_Bat_Leve))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Get_Bat_Leve &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>Get_Bat_Leve_Map</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, baterry.o(i.Get_Bat_Leve_Map))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Rest_BatLeve
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_Deal
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smok_Start_Bat_Leve_Deal
</UL>

<P><STRONG><a name="[83]"></a>Get_Oil_Leve</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, out.o(i.Get_Oil_Leve))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>Get_Oil_Leve_Map</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, out.o(i.Get_Oil_Leve_Map))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_Deal
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>Get_Out_Volt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, out.o(i.Get_Out_Volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_Out_Volt &rArr; GetADCValue &rArr; adc_channel_config &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
</UL>

<P><STRONG><a name="[47]"></a>Get_Power_Rest_BatLeve</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, baterry.o(i.Get_Power_Rest_BatLeve))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Get_Power_Rest_BatLeve &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve_Map
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>Get_Usb_Ad</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, portscan.o(i.Get_Usb_Ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Get_Usb_Ad &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Scan
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[4a]"></a>Gpio_Init</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Gpio_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Gpio_Wake</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, sleep.o(i.Gpio_Wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Gpio_Wake &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[9a]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, py32c642_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
</UL>

<P><STRONG><a name="[5b]"></a>HAL_FLASH_OBProgram</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, py32c642_hal_flash.o(i.HAL_FLASH_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_FLASH_OBProgram &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_OptrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, py32c642_hal_flash.o(i.HAL_FLASH_OB_Launch))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, py32c642_hal_flash.o(i.HAL_FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
</UL>

<P><STRONG><a name="[99]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, py32c642_hal_flash.o(i.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
</UL>

<P><STRONG><a name="[98]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, py32c642_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
</UL>

<P><STRONG><a name="[3f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, py32c642_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32c642_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LL_ADC_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, py32c642_ll_adc.o(i.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[5f]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, py32c642_ll_adc.o(i.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[60]"></a>LL_EXTI_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, py32c642_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
</UL>

<P><STRONG><a name="[79]"></a>LL_GPIO_Init</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, py32c642_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
</UL>

<P><STRONG><a name="[2e]"></a>LL_Init1msTick</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, py32c642_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[91]"></a>LL_LPTIM_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, py32c642_ll_lptim.o(i.LL_LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_LPTIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_init
</UL>

<P><STRONG><a name="[2f]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, py32c642_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[9e]"></a>LL_TIM_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, py32c642_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[88]"></a>LL_mDelay</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, py32c642_ll_utils.o(i.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32c642_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Out_Deal</STRONG> (Thumb, 2020 bytes, Stack size 16 bytes, out.o(i.Out_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Out_Deal &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Oil_Leve_Map
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve_Map
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smok_Start_Bat_Leve_Deal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShortData
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Out_Volt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Out_Stop</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, portscan.o(i.Out_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Out_Stop &rArr; Set_Disp_Num
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrShortData
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Scan
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32c642_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Port_Scan</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, portscan.o(i.Port_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Port_Scan &rArr; Get_Usb_Ad &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Stop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Ad
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>Power_Reset_Port_Scan</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, portscan.o(i.Power_Reset_Port_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Power_Reset_Port_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32c642_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SetShortData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, out.o(i.SetShortData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
</UL>

<P><STRONG><a name="[38]"></a>Set_Disp_Num</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, disp.o(i.Set_Disp_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Disp_Num
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve_Map
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrShortData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Scan
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Scan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_Deal
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Stop
</UL>

<P><STRONG><a name="[97]"></a>ShortIsData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, out.o(i.ShortIsData))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Sleep</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, sleep.o(i.Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sleep &rArr; enter_stop &rArr; Get_Usb_Ad &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Rest_BatLeve
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableRisingTrig
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableFallingTrig
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Sleep_Gpio</STRONG> (Thumb, 686 bytes, Stack size 48 bytes, sleep.o(i.Sleep_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sleep_Gpio &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_SetEXTISource
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[69]"></a>Smok_Start_Bat_Leve_Deal</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, baterry.o(i.Smok_Start_Bat_Leve_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Smok_Start_Bat_Leve_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve_Map
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
</UL>

<P><STRONG><a name="[7d]"></a>Switch_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, switchdip.o(i.Switch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Switch_Init &rArr; Get_Switch_Ad &rArr; GetADCValue &rArr; adc_channel_config &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Switch_Ad
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Switch_Scan</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, switchdip.o(i.Switch_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Switch_Scan &rArr; Get_Switch_Ad &rArr; GetADCValue &rArr; adc_channel_config &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Switch_Ad
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32c642_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_py32c642.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; DelayTime
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TIM14_IRQHandler</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, py32c642_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Oil_Leve
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsEnabledIT_UPDATE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, py32c642_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsEnabledIT_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32c642xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[84]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_config
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[41]"></a>adc_channel_config</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, adc.o(i.adc_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_channel_config &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChannels
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>

<P><STRONG><a name="[40]"></a>adc_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc.o(i.adc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>

<P><STRONG><a name="[42]"></a>adc_enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, adc.o(i.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>

<P><STRONG><a name="[87]"></a>adc_init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adc_init &rArr; LL_ADC_REG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>delay_us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adc.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[74]"></a>enter_stop</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, sleep.o(i.enter_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = enter_stop &rArr; Get_Usb_Ad &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_UPDATE
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableIT_UPDATE
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_DisableClock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Usb_Ad
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatVoltage
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[94]"></a>iwdg_init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, pwr.o(i.iwdg_init))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>lptim_init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lptim.o(i.lptim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lptim_init &rArr; LL_LPTIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ErrorHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPTIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>lptim_start</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lptim.o(i.lptim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lptim_start
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[10]"></a>main</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; Sleep &rArr; enter_stop &rArr; Get_Usb_Ad &rArr; BatVoltage &rArr; Adc_CalBatRef &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptim_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Scan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortIsData
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Reset_Port_Scan
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Scan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Power_Rest_BatLeve
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Oil_Leve_Map
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve_Map
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Leve
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_Deal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrShortData
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[93]"></a>option_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pwr.o(i.option_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = option_init &rArr; HAL_FLASH_OBProgram &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Lock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OBProgram
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>timer14_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tim.o(i.timer14_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer14_init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_UPDATE
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>timer1_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tim.o(i.timer1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer1_init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_UPDATE
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>DelayTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_py32c642.o(i.DelayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3d]"></a>LL_EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, py32c642_it.o(i.LL_EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[3c]"></a>LL_EXTI_IsActiveFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, py32c642_it.o(i.LL_EXTI_IsActiveFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32c642_it.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32c642_it.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>LL_TIM_IsEnabledIT_UPDATE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32c642_it.o(i.LL_TIM_IsEnabledIT_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32c642_ll_adc.o(i.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
</UL>

<P><STRONG><a name="[61]"></a>LL_EXTI_DisableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32c642_ll_exti.o(i.LL_EXTI_DisableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[63]"></a>LL_EXTI_DisableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32c642_ll_exti.o(i.LL_EXTI_DisableIT))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[64]"></a>LL_EXTI_EnableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32c642_ll_exti.o(i.LL_EXTI_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[66]"></a>LL_EXTI_EnableFallingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32c642_ll_exti.o(i.LL_EXTI_EnableFallingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[62]"></a>LL_EXTI_EnableIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32c642_ll_exti.o(i.LL_EXTI_EnableIT))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[65]"></a>LL_EXTI_EnableRisingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32c642_ll_exti.o(i.LL_EXTI_EnableRisingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_OB_OptrConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, py32c642_hal_flash.o(i.FLASH_OB_OptrConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_OB_OptrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OBProgram
</UL>

<P><STRONG><a name="[44]"></a>LL_ADC_IsActiveFlag_EOC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.LL_ADC_IsActiveFlag_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>

<P><STRONG><a name="[86]"></a>LL_ADC_REG_SetSequencerChannels</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.LL_ADC_REG_SetSequencerChannels))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_config
</UL>

<P><STRONG><a name="[43]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.LL_ADC_REG_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>

<P><STRONG><a name="[85]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, adc.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_config
</UL>

<P><STRONG><a name="[4d]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[4c]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[4e]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[4f]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[51]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[50]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[4b]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[9d]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim.o(i.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[a0]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim.o(i.LL_TIM_EnableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[9f]"></a>LL_TIM_EnableIT_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tim.o(i.LL_TIM_EnableIT_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tim.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[a2]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tim.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer14_init
</UL>

<P><STRONG><a name="[3b]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, disp.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_Deal
</UL>

<P><STRONG><a name="[72]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, disp.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Num
</UL>

<P><STRONG><a name="[6a]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, out.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
</UL>

<P><STRONG><a name="[68]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, out.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Deal
</UL>

<P><STRONG><a name="[70]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, portscan.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Reset_Port_Scan
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Scan
</UL>

<P><STRONG><a name="[8c]"></a>LL_APB1_GRP2_DisableClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sleep.o(i.LL_APB1_GRP2_DisableClock))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[53]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sleep.o(i.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[76]"></a>LL_EXTI_DisableFallingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sleep.o(i.LL_EXTI_DisableFallingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[75]"></a>LL_EXTI_DisableRisingTrig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sleep.o(i.LL_EXTI_DisableRisingTrig))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[7a]"></a>LL_EXTI_SetEXTISource</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sleep.o(i.LL_EXTI_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
</UL>

<P><STRONG><a name="[8d]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[59]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sleep.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[55]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sleep.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[56]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sleep.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[57]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sleep.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[58]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sleep.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[5a]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, sleep.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[8a]"></a>LL_TIM_ClearFlag_UPDATE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sleep.o(i.LL_TIM_ClearFlag_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[89]"></a>LL_TIM_DisableCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.LL_TIM_DisableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[8b]"></a>LL_TIM_DisableIT_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.LL_TIM_DisableIT_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[54]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.LL_TIM_EnableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Wake
</UL>

<P><STRONG><a name="[8f]"></a>LL_TIM_EnableIT_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.LL_TIM_EnableIT_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_stop
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sleep.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sleep.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Gpio
</UL>

<P><STRONG><a name="[48]"></a>Get_Switch_Ad</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, switchdip.o(i.Get_Switch_Ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_Switch_Ad &rArr; GetADCValue &rArr; adc_channel_config &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Scan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[16]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
