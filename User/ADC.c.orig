#include "ADC.h"
#include "main.h"
void adc_init(void)
{
	//使能ADC时钟
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
	//ADC校准
  if (LL_ADC_IsEnabled(ADC1) == 0)
  {
    LL_ADC_StartCalibration(ADC1);
    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
    {
		}
    LL_mDelay(1);
  }
	
	__IO uint32_t wait_loop_index = 0;
  LL_ADC_InitTypeDef ADC_Init={0};
  LL_ADC_REG_InitTypeDef LL_ADC_REG_InitType={0};
  ADC_Common_TypeDef ADC_Common_Type={0};
	
	//设置ADC频率（24M/4）,右对齐，无低功耗模式，12位精度
  ADC_Init.Clock=LL_ADC_CLOCK_SYNC_PCLK_DIV4;
  ADC_Init.DataAlignment=LL_ADC_DATA_ALIGN_RIGHT;
  ADC_Init.LowPowerMode=LL_ADC_LP_MODE_NONE;
  ADC_Init.Resolution=LL_ADC_RESOLUTION_12B;
  LL_ADC_Init(ADC1,&ADC_Init);
  //采样转化周期
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
	//采样模式
  LL_ADC_REG_InitType.ContinuousMode=LL_ADC_REG_CONV_SINGLE;
  LL_ADC_REG_InitType.Overrun=LL_ADC_REG_OVR_DATA_OVERWRITTEN;
  LL_ADC_REG_InitType.SequencerDiscont=LL_ADC_REG_SEQ_DISCONT_DISABLE;
  LL_ADC_REG_InitType.TriggerSource=LL_ADC_REG_TRIG_SOFTWARE;
  LL_ADC_REG_Init(ADC1,&LL_ADC_REG_InitType);
#if 0
	//选择1.5V作为ADC参考源
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),LL_ADC_PATH_INTERNAL_VREFINT);
  LL_ADC_SetVrefBufferVoltage(ADC1,LL_ADC_VREFBUF_1P5V);
  LL_ADC_EnableVrefBufferVoltage(ADC1);
  wait_loop_index = ((LL_ADC_DELAY_VREFINT_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
  while(wait_loop_index != 0)
  {
    wait_loop_index--;
  }
#endif

}
void adc_enable(void)
{
	//使能ADC
	LL_ADC_Enable(ADC1);
  LL_mDelay(1);
}

//单通道，配置通道前不能使能ADC
void adc_channel_config(uint8_t channel)
{
  switch (channel)
  {
  case 0:
    ADC_0_GPIO;
  	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_0);
  break;
  case 1:
    ADC_1_GPIO;
    LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_1);
  break;
  case 2:
  ADC_2_GPIO;
	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_2);
  break;
  case 3:
     ADC_3_GPIO;
	   LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_3);
  break;
  case 4:
    ADC_4_GPIO;
  	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_4);
    break;
  case 5:
  ADC_5_GPIO;
	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_5);
    break;
    case 6:
  ADC_6_GPIO;
	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_6);
    break;
    case 7:
  ADC_7_GPIO;
	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_7);
    break;
  default:
    break;
  }
	
}
//开启转换
void adc_start(void)
{
	LL_ADC_REG_StartConversion(ADC1);
}
void adc_disable(void)
{
	LL_ADC_Disable(ADC1);
}
//多通道
void adc_channels_config(uint32_t *channel,uint8_t num)
{
	ADC1->CHSELR=0;
	for(uint8_t i=0;i<num;i++)
	LL_ADC_REG_SetSequencerChAdd(ADC1, *(channel+i));
}
//获取AD值
uint16_t adc_dr(void)
{
	uint16_t dr=0;
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
	LL_ADC_ClearFlag_EOC(ADC1);
	dr=	LL_ADC_REG_ReadConversionData12(ADC1);
	return dr;
}
//选择通道12，通过1.2V反推VCC
uint16_t adc_vcc(void)
{	
	uint16_t vcc=0;
	vcc=adc_dr();	
	return __LL_ADC_CALC_VREFANALOG_VOLTAGE(vcc,LL_ADC_RESOLUTION_12B);
}
